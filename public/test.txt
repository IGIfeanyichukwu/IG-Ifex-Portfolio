BallAnim gibberish


import React, { Fragment, useState } from 'react';


const BallAnim = () => {


// Some random colors
// const colors = ["#3CC157", "#2AA7FF", "#1B1B1B", "#FCBC0F", "#F85F36"];


const colors = ["#E14B5A", "#FFD037", "#575988", "#F7C4A7", "#E60002"];

// const colors = ["#E60002"];

// const texts = ["<i class='fab fa-php'></i>", "<i class='fab fa-git'></i>", "<i class='fab fa-css3'></i>", "<i class='fab fa-html5'></i>", "<i class='fab fa-js'></i>", "<i class='fab fa-linux'></i>", "<i class='fab fa-npm'></i>", "<i class='fab fa-react'></i>", "<i class='fab fa-sass'></i>"]



const texts = ["fab fa-php", "fab fa-git", "fab fa-css3", "fab fa-html5", "fab fa-js", "fab fa-linux", "fab fa-npm", "fab fa-react", "fab fa-sass"]

const numBalls = 50;
const balls = [];
let ball = {
  id: null,
  innerJSX: null
}

let  keyframeStyle = '';

for (let i = 0; i < numBalls; i++) {
  let ball = {
  id: null,
  innerJSX: null
}
  ball.id = i+1;
  ball.innerJSX = texts[Math.floor(Math.random() * texts.length)];
  balls.push(ball);

  let to = {
  x: Math.random() * (i % 2 === 0 ? -11 : 11),
  y: Math.random() * 12
};

keyframeStyle += `@keyframes animateicon${i} {
            0% { 
              transform: translate(0, 0); 
          },
          100% { 
            transform: translate(${to.x}rem, ${to.y}rem);
          } 
          \n`

}

console.log(balls);

const [allBalls, setAllBalls] = useState(balls);

console.log(allBalls);

const getBallStyle = (x) => {
  return {
    color: 'red',
    position: 'absolute',
    background: 'transparent',
    left: `${Math.floor(Math.random() * 100)}vw`,
    top: `${Math.floor(Math.random() * 100)}vh`,
    transform: `scale(${Math.random()})`,
    width: `${Math.random()}em`,
    fontSize: `${(Math.random()*10)+14}px`,
    animationName: `animateicon5`,
    animationDuration: `2s`, // random duration
    animationDirection: 'alternate',
    animationIterationCount: 'infinite',
    animationTimingFunction: 'ease-in-out'
  }

}

/*let  keyframeStyle = '';
for (let i=0; i < allBalls.length; i++) {

keyframeStyle += `@keyframes animateicon${i} {
            0% { transform: translate(0, 0); 
          } \n`

}*/

console.log(keyframeStyle);


  return allBalls.map((allBall, idx) => { 
      let to = {
        x: Math.random() * (idx % 2 === 0 ? -11 : 11),
        y: Math.random() * 12
      };

    return (
      <div className="ball" style={getBallStyle(idx)}><i className={allBall.innerJSX}></i>
      <style>
        {`
          ${keyframeStyle}

          `}
      </style>
      </div>
    )});
}

export default BallAnim;


/*for (let i = 0; i < numBalls; i++) {
  // let ballWrapper = document.createElement("div");
  let ball = document.createElement("div");
  ball.classList.add("ball");
  // ball.style.background = colors[Math.floor(Math.random() * colors.length)];
  ball.style.background = 'transparent';
  ball.style.left = `${Math.floor(Math.random() * 100)}vw`;
  ball.style.top = `${Math.floor(Math.random() * 100)}vh`;
  ball.style.transform = `scale(${Math.random()})`;
  ball.style.width = `${Math.random()}em`;
  ball.style.height = ball.style.width;
  ball.innerHTML = texts[Math.floor(Math.random() * texts.length)];
  ball.style.color = colors[Math.floor(Math.random() * colors.length)];
  ball.style.fontSize = `${(Math.random()*10)+14}px`;
  balls.push(ball);
  // ballWrapper.style.Height = '100vh';
  // ballWrapper.appendChild(ball);
  document.body.append(ball);
  // document.body.style.maxHeight = "100vh";

}*/

/*// Keyframes
balls.forEach((el, i, ra) => {
  let to = {
    x: Math.random() * (i % 2 === 0 ? -11 : 11),
    y: Math.random() * 12
  };

  let anim = el.animate(
    [
      { transform: "translate(0, 0)" },
      { transform: `translate(${to.x}rem, ${to.y}rem)` }
    ],
    {
      duration: (Math.random() + 3) * 2000, // random duration
      direction: "alternate",
      fill: "both",
      iterations: Infinity,
      easing: "ease-in-out"
    }
  );
});

const allBalls = document.querySelectorAll('.ball');
if(allBalls.length > 50) {
  setIsBallMoreThanFifty(true);
}
console.log(allBalls);

console.log('Number of Ball Array Element is '+balls.length);*/
	/*return (
		<Fragment></Fragment>
		);
}

export default BallAnim;*/